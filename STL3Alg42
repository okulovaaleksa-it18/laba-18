//STL3Alg42.Дан список L.
//Перегруппировать элементы списка, расположив в начале отрицательные, затем нулевые, 
//а затем положительные элементы(порядок расположения элементов в каждой группе должен совпадать с исходным).
//Использовать два вызова алгоритма stable_partition.

//Алгоритм stable_partition позволяет разделить элементы в контейнере, 
//сохраняя порядок элементов внутри каждой из групп.

#include <iostream>
#include <list>
#include <algorithm> 
#include <iterator>
#include <fstream>
#include <cstdlib>
#include <ctime>

using namespace std;

void printList(const list<int>& L) 
{
    for (int num : L) 
    {
        cout << num << " ";
    }
    cout << endl;
}

//ввод с клавиатуры
void inputListKeyboard(list<int>& L, int& n) 
{
    cout << "Введите количество элементов списка: ";
    cin >> n;

    while (n <= 0) 
    {
        cout << "Количество должно быть положительным. Повторите ввод: ";
        cin >> n;
    }

    cout << "Введите " << n << " элементов списка: ";
    for (int i = 0; i < n; ++i) 
    {
        int num;
        cin >> num;
        L.push_back(num);
    }
}

//ввод из файла
void inputListFile(list<int>& L, int& n)
{
    ifstream file("lab188.txt");
    if (!file)
    {
        cout << "Не удалось открыть файл" << endl;
        exit(1);
    }

    file >> n;
    if (n % 2 != 0 || n <= 0)
    {
        cout << "Ошибка: количество элементов в файле должно быть положительным и чётным" << endl;
        exit(1);
    }

    for (int i = 0; i < n; ++i)
    {
        int num;
        file >> num;
        L.push_back(num);
    }

    file.close();
}

//случайный ввод
void inputListRandom(list<int>& L, int& n) 
{
    cout << "Введите количество элементов: ";
    cin >> n;

    while (n <= 0) 
    {
        cout << "Количество должно быть положительным. Повторите ввод: ";
        cin >> n;
    }

    int min_val, max_val;
    cout << "Введите диапазон случайных чисел (min max): ";
    cin >> min_val >> max_val;

    srand(time(0));
    for (int i = 0; i < n; ++i) 
    {
        int x = min_val + rand() % (max_val - min_val + 1);
        L.push_back(x);
    }
}

void inputListWithChoice(list<int>& L, int& n) 
{
    int choice;
    cout << "Выберите способ ввода данных:\n";
    cout << "1 — С клавиатуры\n";
    cout << "2 — Из файла\n";
    cout << "3 — Случайные числа\n";
    cout << "Ваш выбор: ";
    cin >> choice;

    switch (choice) 
    {
    case 1:
        inputListKeyboard(L, n);
        break;
    case 2:
        inputListFile(L, n);
        break;
    case 3:
        inputListRandom(L, n);
        break;
    default:
        cout << "Неверный выбор" << endl;
        exit(1);
    }
}

int main() 
{
    setlocale(LC_ALL, "ru");

    list<int> L;
    int n;

    inputListWithChoice(L, n);

    cout << "Исходный список: ";
    printList(L);

    // сначала отрицательные, потом нули, потом положительные
    stable_partition(L.begin(), L.end(), [](int x) { return x < 0; });
    stable_partition(L.begin(), L.end(), [](int x) { return x <= 0; });

    cout << "Список после перегруппировки: ";
    printList(L);

    return 0;
}
